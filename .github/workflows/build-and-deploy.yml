# This is a basic workflow to help you get started with Actions

name: Build-and-deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-resume:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12.18.3'
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-

      - name: Install dependencies
        run: npm install

      - name: Build jsonresume page
        run: npm run-script build

      - name: Copy resume pdf to dist folder
        run: cp resume.pdf dist/

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist
            !dist/**/*.gitkeep
          retention-days: 7

  build-image:
    needs: build-resume
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download production artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Docker login
        run: echo "$DOCKER_PASSWORD" | docker login --username=$DOCKER_USERNAME --password-stdin

      - name: Build image
        run: docker build -t jefecito/resume:latest -f Dockerfile dist

      - name: Push image
        run: docker push jefecito/resume:latest

  deploy:
    needs: build-image
    env:
      HOST: ${{ secrets.HOST }}
      HOST_DIRECTORY_PATH: ${{ secrets.HOST_DIRECTORY_PATH }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.HOST }}
          config: |
            Host server
            HostName ${{ secrets.HOST }}
            User ${{ secrets.USER_HOST }}
            IdentityFile ~/.ssh/id_rsa
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)

      - name: Add host to known_hosts
        run: ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

      - name: Deploy new image
        run: |
          ssh server "docker pull jefecito/resume:latest"
          ssh server "cd $HOST_DIRECTORY_PATH && docker-compose up -d"
          ssh server "docker image prune -f"

      - name: Purge cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
          -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
